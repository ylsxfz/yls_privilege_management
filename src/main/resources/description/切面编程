切面编程aop：
@Aspect和@Component
首先，这个@Aspect注释告诉Spring这是个切面类，然后@Compoment将转换成Spring容器中的bean或者是代理bean。
总之要写切面这两个注解一起用就是了。
既然是切面类，那么肯定是包含PointCut还有Advice两个要素的，
下面对几个注解展开讲来看看在@Aspect中是怎么确定切入点（PointCut）和增强通知（Advice）的。

@PointCut
这个注解包含两部分，PointCut表达式和PointCut签名。表达式是拿来确定切入点的位置的，
说白了就是通过一些规则来确定，哪些方法是要增强的，也就是要拦截哪些方法。

@PointCut(...........)括号里面那些就是表达式。这里的execution是其中的一种匹配方式，还有
execution: 匹配连接点
within: 某个类里面
this: 指定AOP代理类的类型
target:指定目标对象的类型
args: 指定参数的类型
bean:指定特定的bean名称，可以使用通配符（Spring自带的）
@target： 带有指定注解的类型
@args: 指定运行时传的参数带有指定的注解
@within: 匹配使用指定注解的类
@annotation:指定方法所应用的注解

JoinPoint包含了几个很有用的参数：
    Object[] getArgs：返回目标方法的参数
    Signature getSignature：返回目标方法的签名
    Object getTarget：返回被织入增强处理的目标对象
    Object getThis：返回AOP框架为目标对象生成的代理对象

@Before
这个是决定advice在切入点方法的什么地方执行的标签，这个注解的意思是在切入点方法执行之前执行我们定义的advice。

@After
这个注解就是在切入的方法运行完之后把我们的advice增强加进去。一样方法中可以添加JoinPoint。

@Around
这个注解可以简单地看作@Before和@After的结合。这个注解和其他的比比较特别，它的方法的参数一定要是ProceedingJoinPoint，
这个对象是JoinPoint的子类。我们可以把这个看作是切入点的那个方法的替身，这个proceedingJoinPoint有个proceed（）方法，
相当于就是那切入点的那个方法执行，简单地说就是让目标方法执行，然后这个方法会返回一个对象，这个对象就是那个切入点所在位置的方法所返回的对象。
除了这个Proceed方法（很重要的方法），其他和那几个注解一样。

@AfterReturning
顾名思义，这个注解是在目标方法正常完成后把增强处理织入。
这个注解可以指定两个属性（之前的三个注解后面的括号只写一个@PointCut表达式，也就是只有一个属性），
一个是和其他注解一样的PointCut表达式，也就是描述该advice在哪个接入点被织入；
然后还可以有个returning属性，表明可以在Advice的方法中有目标方法返回值的形参。

@AfterThrowing
异常抛出增强，在异常抛出后织入的增强。有点像上面的@AfterReturning，
这个注解也是有两个属性，pointcut和throwing。
用法也和刚刚的那个returning差不多：